{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let PersonFormComponent = class PersonFormComponent {\n  constructor(fb, personService, contactService, route, router, http) {\n    this.fb = fb;\n    this.personService = personService;\n    this.contactService = contactService;\n    this.route = route;\n    this.router = router;\n    this.http = http;\n    this.isEditing = false;\n    this.contacts = [];\n    this.showContacts = false;\n    this.personForm = this.fb.group({\n      active: [true],\n      address: ['', Validators.required],\n      city: ['', Validators.required],\n      contactType: [null, Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', Validators.required],\n      phone: ['', [Validators.required, Validators.pattern('^[0-9]{10,11}$')]],\n      state: ['', Validators.required],\n      zipCode: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(8)]]\n    });\n  }\n  ngOnInit() {\n    this.personId = Number(this.route.snapshot.paramMap.get('id'));\n    if (this.personId) {\n      this.isEditing = true;\n      this.personService.getPersonById(this.personId).subscribe(person => {\n        this.personForm.reset(person);\n        this.loadContacts();\n      });\n    }\n  }\n  loadContacts() {\n    if (this.personId) {\n      this.contactService.getContactsByPersonId(this.personId).subscribe(data => {\n        this.contacts = data;\n      });\n    }\n  }\n  toggleContacts() {\n    this.showContacts = !this.showContacts;\n  }\n  addContact() {}\n  onSubmit() {\n    if (this.personForm.invalid) {\n      this.personForm.markAllAsTouched();\n      return;\n    }\n    const person = this.personForm.value;\n    console.log('Enviando para a API:', JSON.stringify(person, null, 2));\n    const confirmation = window.confirm('Tem certeza que deseja atualizar esta pessoa?');\n    if (confirmation) {\n      if (this.isEditing) {\n        this.personService.updatePerson(this.personId, person).subscribe({\n          next: response => {\n            console.log('Pessoa atualizada com sucesso:', response);\n            alert('Pessoa atualizada com sucesso!');\n            this.router.navigate(['/person-table']);\n          },\n          error: err => {\n            console.error('Erro ao atualizar pessoa:', err);\n            alert('Erro ao atualizar pessoa. Tente novamente.');\n          }\n        });\n      } else {\n        this.personService.createPerson(person).subscribe({\n          next: () => {\n            console.log('Pessoa criada com sucesso:', person);\n            this.router.navigate(['/person-table']);\n          },\n          error: err => {\n            console.error('Erro ao criar pessoa:', err);\n            alert('Erro ao criar pessoa. Tente novamente.');\n          }\n        });\n      }\n    }\n  }\n  onCancel() {\n    this.router.navigate(['/person-table']);\n  }\n};\nPersonFormComponent = __decorate([Component({\n  selector: 'app-person-form',\n  templateUrl: './person-form.component.html',\n  styleUrls: ['./person-form.component.scss']\n})], PersonFormComponent);","map":{"version":3,"names":["Component","Validators","PersonFormComponent","constructor","fb","personService","contactService","route","router","http","isEditing","contacts","showContacts","personForm","group","active","address","required","city","contactType","email","name","phone","pattern","state","zipCode","minLength","maxLength","ngOnInit","personId","Number","snapshot","paramMap","get","getPersonById","subscribe","person","reset","loadContacts","getContactsByPersonId","data","toggleContacts","addContact","onSubmit","invalid","markAllAsTouched","value","console","log","JSON","stringify","confirmation","window","confirm","updatePerson","next","response","alert","navigate","error","err","createPerson","onCancel","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Asus\\Desktop\\ContactList-Front-end-main\\src\\app\\components\\person-form\\person-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PersonService } from '../../services/person.service';\r\nimport { ContactService } from '../../services/contact.service'; // Importando o serviÃ§o de contatos\r\nimport { Person } from '../../models/person';\r\nimport { ContactDTO } from '../../models/contact-dto';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-person-form',\r\n  templateUrl: './person-form.component.html',\r\n  styleUrls: ['./person-form.component.scss']\r\n})\r\nexport class PersonFormComponent implements OnInit {\r\n  personForm: FormGroup;\r\n  isEditing = false;\r\n  personId?: number;\r\n  contacts: ContactDTO[] = [];\r\n  showContacts = false; \r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private personService: PersonService,\r\n    private contactService: ContactService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private http: HttpClient\r\n  ) {\r\n    this.personForm = this.fb.group({\r\n      active: [true],\r\n      address: ['', Validators.required],\r\n      city: ['', Validators.required],\r\n      contactType: [null, Validators.required], \r\n      email: ['', [Validators.required, Validators.email]],\r\n      name: ['', Validators.required],\r\n      phone: ['', [Validators.required, Validators.pattern('^[0-9]{10,11}$')]],\r\n      state: ['', Validators.required],\r\n      zipCode: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(8)]],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.personId = Number(this.route.snapshot.paramMap.get('id'));\r\n    if (this.personId) {\r\n      this.isEditing = true;\r\n      this.personService.getPersonById(this.personId).subscribe(person => {\r\n        this.personForm.reset(person);\r\n        this.loadContacts();\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  loadContacts(): void {\r\n    if (this.personId) {\r\n      this.contactService.getContactsByPersonId(this.personId).subscribe((data: ContactDTO[]) => {\r\n        this.contacts = data;\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleContacts(): void {\r\n    this.showContacts = !this.showContacts;\r\n  }\r\n\r\n  addContact(): void {\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.personForm.invalid) {\r\n      this.personForm.markAllAsTouched();\r\n      return;\r\n    }\r\n  \r\n    const person: Person = this.personForm.value;\r\n    console.log('Enviando para a API:', JSON.stringify(person, null, 2));\r\n  \r\n    const confirmation = window.confirm('Tem certeza que deseja atualizar esta pessoa?');\r\n    \r\n    if (confirmation) {\r\n      if (this.isEditing) {\r\n        this.personService.updatePerson(this.personId!, person).subscribe({\r\n          next: (response) => {\r\n            console.log('Pessoa atualizada com sucesso:', response);\r\n            alert('Pessoa atualizada com sucesso!');\r\n            this.router.navigate(['/person-table']);\r\n          },\r\n          error: (err) => {\r\n            console.error('Erro ao atualizar pessoa:', err);\r\n            alert('Erro ao atualizar pessoa. Tente novamente.');\r\n          }\r\n        });\r\n      } else {\r\n        this.personService.createPerson(person).subscribe({\r\n          next: () => {\r\n            console.log('Pessoa criada com sucesso:', person);\r\n            this.router.navigate(['/person-table']);\r\n          },\r\n          error: (err) => {\r\n            console.error('Erro ao criar pessoa:', err);\r\n            alert('Erro ao criar pessoa. Tente novamente.');\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.router.navigate(['/person-table']);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}